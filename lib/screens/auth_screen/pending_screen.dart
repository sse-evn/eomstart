import 'package:flutter/material.dart';
import 'package:lottie/lottie.dart';
import 'package:flutter_secure_storage/flutter_secure_storage.dart';
import 'package:http/http.dart' as http;
import 'dart:convert';
import 'package:micro_mobility_app/config/config.dart';

class PendingApprovalScreen extends StatefulWidget {
  const PendingApprovalScreen({super.key});

  @override
  State<PendingApprovalScreen> createState() => _PendingApprovalScreenState();
}

class _PendingApprovalScreenState extends State<PendingApprovalScreen>
    with TickerProviderStateMixin {
  late final AnimationController _controller;
  final FlutterSecureStorage _storage = const FlutterSecureStorage();
  bool _isChecking = false;
  bool _disposed = false; // ‚Üê –¥–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è dispose

  // –ò–Ω—Ç–µ—Ä–≤–∞–ª –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏ ‚Äî 30 —Å–µ–∫
  static const Duration _checkInterval = Duration(seconds: 30);

  @override
  void initState() {
    super.initState();
    _controller =
        AnimationController(duration: const Duration(seconds: 3), vsync: this)
          ..repeat();
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _checkUserStatus();
    });
    _startPeriodicCheck();
  }

  void _startPeriodicCheck() {
    // –ù–µ –∑–∞–ø—É—Å–∫–∞—Ç—å, –µ—Å–ª–∏ –≤–∏–¥–∂–µ—Ç —É–∂–µ —É–¥–∞–ª—ë–Ω
    if (_disposed) return;

    Future.delayed(_checkInterval, () {
      if (!_disposed && mounted && !_isChecking) {
        _checkUserStatus();
        _startPeriodicCheck(); // —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º
      }
    });
  }

  @override
  void dispose() {
    _disposed = true; // ‚Üê —Ñ–ª–∞–≥ –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ñ–æ–Ω–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
    _controller.dispose();
    super.dispose();
  }

  Future<void> _checkUserStatus() async {
    if (_isChecking || _disposed || !mounted) return;

    setState(() {
      _isChecking = true;
    });

    try {
      final token = await _storage.read(key: 'jwt_token');
      if (token == null) {
        _navigateToLogin();
        return;
      }

      final response = await http.get(
        Uri.parse(AppConfig.profileUrl),
        headers: {
          'Authorization': 'Bearer $token',
          'Content-Type': 'application/json'
        },
      );

      if (response.statusCode == 200) {
        final userData = jsonDecode(response.body) as Map<String, dynamic>;
        final status = userData['status'] as String?;
        final isActive = userData['is_active'] as bool?;

        // –Ø–≤–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞: —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–±–∞ —É—Å–ª–æ–≤–∏—è –≤—ã–ø–æ–ª–Ω–µ–Ω—ã ‚Äî –ø–µ—Ä–µ—Ö–æ–¥–∏–º
        if (status == 'active' && isActive == true) {
          _navigateToDashboard();
          return;
        } else {
          // –õ—é–±–æ–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –æ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è = –≤—Å—ë –µ—â—ë –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏
          _showStillPendingMessage();
        }
      } else if (response.statusCode == 401) {
        _navigateToLogin();
        return;
      } else {
        _showError('–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞: ${response.statusCode}');
      }
    } catch (e) {
      debugPrint('Error checking user status: $e');
      _showError('–û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: $e');
      // –ê–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—Å—è —Å–∞–º–∞ ‚Äî –Ω–µ –ø—Ä–µ—Ä—ã–≤–∞–µ–º —Ü–∏–∫–ª
    } finally {
      if (mounted && !_disposed) {
        setState(() {
          _isChecking = false;
        });
      }
    }
  }

  void _navigateToDashboard() {
    if (_disposed || !mounted) return;
    Navigator.pushNamedAndRemoveUntil(context, '/dashboard', (route) => false);
  }

  void _navigateToLogin() {
    if (_disposed || !mounted) return;
    Navigator.pushNamedAndRemoveUntil(context, '/login', (route) => false);
  }

  void _showStillPendingMessage() {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      const SnackBar(
        content:
            Text('–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –≤—Å—ë –µ—â—ë –æ–∂–∏–¥–∞–µ—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º'),
        duration: Duration(seconds: 2),
      ),
    );
  }

  void _showError(String message) {
    if (!mounted) return;
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        duration: const Duration(seconds: 3),
        backgroundColor: Colors.red,
      ),
    );
  }

  Future<void> _logout() async {
    if (_disposed || !mounted) return;

    // –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞–ª—å–Ω–µ–π—à–∏–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    _disposed = true;

    try {
      final token = await _storage.read(key: 'jwt_token');
      if (token != null) {
        await http.post(
          Uri.parse(AppConfig.logoutUrl),
          headers: {
            'Authorization': 'Bearer $token',
            'Content-Type': 'application/json'
          },
        );
      }
    } catch (e) {
      debugPrint('Error during logout: $e');
    } finally {
      await _storage.delete(key: 'jwt_token');
      await _storage.delete(key: 'refresh_token');
      _navigateToLogin();
    }
  }

  @override
  Widget build(BuildContext context) {
    final primaryColor = Colors.green[700]!;

    return Scaffold(
      backgroundColor: Colors.grey[50],
      body: Center(
        child: SingleChildScrollView(
          padding: const EdgeInsets.all(24),
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              SizedBox(
                height: 150,
                child: Lottie.asset(
                  'assets/icons/wired-lineal-884-electric-scooter-loop-cycle.json',
                  controller: _controller,
                  onLoaded: (composition) {
                    _controller.duration = composition.duration;
                  },
                  fit: BoxFit.contain,
                ),
              ),
              const SizedBox(height: 20),

              Text(
                '–û–∂–∏–¥–∞–Ω–∏–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è',
                style: TextStyle(
                  fontSize: 24,
                  fontWeight: FontWeight.bold,
                  color: primaryColor,
                ),
                textAlign: TextAlign.center,
              ),
              const SizedBox(height: 12),

              const Text(
                '–í–∞—à –∞–∫–∫–∞—É–Ω—Ç –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–∏ —É –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞. –ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è.',
                textAlign: TextAlign.center,
                style: TextStyle(fontSize: 14, color: Colors.grey),
              ),
              const SizedBox(height: 24),

              Container(
                padding:
                    const EdgeInsets.symmetric(vertical: 8, horizontal: 16),
                decoration: BoxDecoration(
                  color: Colors.green[50],
                  borderRadius: BorderRadius.circular(12),
                  border: Border.all(color: primaryColor.withOpacity(0.3)),
                ),
                child: const Text(
                  '–ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—ã—á–Ω–æ –∑–∞–Ω–∏–º–∞–µ—Ç –Ω–µ –±–æ–ª–µ–µ 24 —á–∞—Å–æ–≤',
                  style: TextStyle(
                    fontSize: 12,
                    color: Colors.green,
                    fontStyle: FontStyle.italic,
                  ),
                ),
              ),
              const SizedBox(height: 30),

              // üîΩ –ö–Ω–æ–ø–∫–∞ "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å" –£–î–ê–õ–ï–ù–ê ‚Äî –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ç–∞–∫ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è
              // –í–º–µ—Å—Ç–æ –Ω–µ—ë –º–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ —É–±—Ä–∞—Ç—å

              // –í—ã—Ö–æ–¥ –∏–∑ —Å–∏—Å—Ç–µ–º—ã
              TextButton(
                onPressed: _isChecking ? null : _logout,
                child: const Text(
                  '–í—ã–π—Ç–∏ –∏–∑ —Å–∏—Å—Ç–µ–º—ã',
                  style: TextStyle(color: Colors.grey),
                ),
              ),
              const SizedBox(height: 12),

              // –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –∞–≤—Ç–æ–ø—Ä–æ–≤–µ—Ä–∫–∏
              if (_isChecking)
                const Text(
                  '–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞...',
                  style: TextStyle(fontSize: 12, color: Colors.grey),
                )
              else
                Text(
                  '–°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ ${_checkInterval.inSeconds} —Å–µ–∫—É–Ω–¥',
                  style: const TextStyle(fontSize: 12, color: Colors.grey),
                ),
            ],
          ),
        ),
      ),
    );
  }
}
