import 'dart:io';
import 'package:flutter/material.dart';
import 'package:micro_mobility_app/config/app_config.dart';
import 'package:micro_mobility_app/screens/admin/promo_codes_admin_screen.dart'
    show AdminPromoCodesScreen, AdminPromoScreen;
import 'package:micro_mobility_app/screens/admin/shift_history_screen.dart';
import 'package:micro_mobility_app/screens/admin/shift_monitoring_screen.dart';
import 'package:micro_mobility_app/screens/admin/tasks_screen.dart';
import 'package:micro_mobility_app/screens/admin/admin_map_screens.dart';
import 'package:micro_mobility_app/screens/admin/generator_shifts.dart';
import 'package:micro_mobility_app/screens/admin/widgets/admin_users_list.dart';
import 'package:micro_mobility_app/screens/map_screen/map_screens.dart';

class AdminPanelScreen extends StatefulWidget {
  const AdminPanelScreen({super.key});

  @override
  State<AdminPanelScreen> createState() => _AdminPanelScreenState();
}

class _AdminPanelScreenState extends State<AdminPanelScreen>
    with SingleTickerProviderStateMixin {
  int _currentIndex = 0;

  final List<String> _titles = [
    '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
    '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–º–µ–Ω',
    '–ö–∞—Ä—Ç–∞',
    '–°–º–µ–Ω—ã',
    '–ü—Ä–æ–º–æ–∫–æ–¥—ã',
  ];

  late TabController _tabController;

  // üîÅ –ú–µ—Ç–æ–¥ –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–∫–ª–∞–¥–æ–∫
  void _refreshShifts() {
    // –ü—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å–æ–∑–¥–∞—ë–º Future ‚Äî —ç—Ç–æ –±–µ–∑–æ–ø–∞—Å–Ω–æ
    setState(() {
      // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º ‚Äî –ø–µ—Ä–µ—Å—Ç—Ä–æ–∏—Ç—Å—è —á–µ—Ä–µ–∑ FutureBuilder
    });
  }

  @override
  void initState() {
    super.initState();
    _tabController = TabController(length: 2, vsync: this);
  }

  @override
  void dispose() {
    _tabController.dispose();
    super.dispose();
  }

  @override
  Widget build(BuildContext context) {
    final theme = Theme.of(context);
    final primaryColor = theme.colorScheme.primary;

    Widget currentBody;

    switch (_currentIndex) {
      case 0:
        currentBody = const AdminUsersList();
        break;
      case 1:
        currentBody = const GeneratorShiftScreen();
        break;
      case 2:
        currentBody = MapAndZoneScreen();
        break;
      case 3:
        currentBody = Column(
          children: [
            Material(
              color: primaryColor,
              child: TabBar(
                controller: _tabController,
                tabs: const [
                  Tab(text: '–ê–∫—Ç–∏–≤–Ω—ã–µ', icon: Icon(Icons.play_arrow, size: 18)),
                  Tab(text: '–ò—Å—Ç–æ—Ä–∏—è', icon: Icon(Icons.history, size: 18)),
                ],
                labelColor: Colors.white,
                unselectedLabelColor: Colors.white70,
                indicator: UnderlineTabIndicator(
                  borderSide: BorderSide(color: Colors.white, width: 2.0),
                ),
              ),
            ),
            Expanded(
              child: TabBarView(
                controller: _tabController,
                children: [
                  // ‚úÖ –≠–∫—Ä–∞–Ω—ã –ø—Ä–æ—Å—Ç–æ –ø–µ—Ä–µ—Å—Ç—Ä–∞–∏–≤–∞—é—Ç—Å—è –ø—Ä–∏ setState
                  const ShiftMonitoringScreen(),
                  const ShiftHistoryScreen(),
                ],
              ),
            ),
          ],
        );
        break;
      case 4:
        currentBody = const AdminPromoScreen();
        break;
      default:
        currentBody = const AdminUsersList();
    }

    return Scaffold(
      appBar: AppBar(
        title: Text(
          _titles[_currentIndex],
          style: const TextStyle(fontWeight: FontWeight.w600, fontSize: 18),
        ),
        actions: [
          // üîÑ –ö–Ω–æ–ø–∫–∞ –ø—Ä–æ—Å—Ç–æ –≤—ã–∑—ã–≤–∞–µ—Ç setState ‚Äî –∏ –≤—Å—ë –æ–±–Ω–æ–≤–∏—Ç—Å—è
          // IconButton(
          //   icon: const Icon(Icons.refresh),
          //   onPressed: _refreshShifts,
          //   tooltip: '–û–±–Ω–æ–≤–∏—Ç—å',
          // ),
          PopupMenuButton(
            icon: const Icon(Icons.info_outline, size: 18, color: Colors.grey),
            tooltip: '–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å—Ä–µ–¥–µ',
            onSelected: (value) {
              if (value == 'env') {
                ScaffoldMessenger.of(context).showSnackBar(
                  SnackBar(content: Text(AppConfig.environmentInfo)),
                );
              }
            },
            itemBuilder: (ctx) => [
              const PopupMenuItem(value: 'env', child: Text('–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ä–µ–¥—É')),
            ],
          ),
        ],
      ),
      body: Container(
        child: currentBody,
      ),
      bottomNavigationBar: Theme(
        data: Theme.of(context).copyWith(
          splashFactory: NoSplash.splashFactory,
          highlightColor: Colors.transparent,
          splashColor: Colors.transparent,
        ),
        child: BottomNavigationBar(
          currentIndex: _currentIndex,
          onTap: (index) {
            setState(() {
              _currentIndex = index;
            });
          },
          type: BottomNavigationBarType.fixed,
          selectedItemColor: primaryColor,
          unselectedItemColor: Colors.grey[600],
          elevation: 0,
          selectedFontSize: 13,
          selectedLabelStyle: const TextStyle(fontWeight: FontWeight.w600),
          unselectedLabelStyle: const TextStyle(fontWeight: FontWeight.normal),
          items: const [
            BottomNavigationBarItem(
              icon: Icon(Icons.people_outline),
              activeIcon: Icon(Icons.people),
              label: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.calendar_today_outlined),
              activeIcon: Icon(Icons.calendar_today),
              label: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–º–µ–Ω',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.map_outlined),
              activeIcon: Icon(Icons.map),
              label: '–ö–∞—Ä—Ç–∞',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.access_time_outlined),
              activeIcon: Icon(Icons.access_time),
              label: '–°–º–µ–Ω—ã',
            ),
            BottomNavigationBarItem(
              icon: Icon(Icons.local_offer_outlined),
              activeIcon: Icon(Icons.local_offer),
              label: '–ü—Ä–æ–º–æ–∫–æ–¥—ã',
            ),
          ],
        ),
      ),
    );
  }
}
